// Copyright //!year Agnesoft
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// GENERATED FILE. DO NOT MODIFY.

module;

#include <cstdint>
#include <memory>
#include <string>
#include <variant>
#include <vector>

export module adbquery;

namespace adb
{
//--------//
//In built//
//--------//
using Byte = std::uint8_t;
using ByteArray = std::vector<Byte>;
using Buffer = ByteArray;
using Double = double;
using Int64 = std::int64_t;
using i = Int64;
using Index = Int64;
using Offset = Int64;
using String = std::string;

auto deserializeDouble(Buffer &buffer, Offset off) -> Double {
    return {};
}

auto deserializeInt64(Buffer &buffer, Offset off) -> Int64 {
    return {};
}

auto serializeDouble(Buffer &buffer, Offset off, Double value) -> void {

}

auto serializeInt64(Buffer &buffer, Offset off, Int64 value) -> void {

}

auto stringFromBuffer(Buffer &buffer) -> String {
    return {};
}

auto stringToBuffer(String &buffer) -> Buffer {
    return {};
}

auto int64ToLittleEndian(Int64 value) -> Int64 {
    return {};
}

auto doubleToLittleEndian(Double value) -> Double {
    return {};
}

auto int64ToNativeEndian(Int64 value) -> Int64 {
    return {};
}

auto doubleToNativeEndian(Double value) -> Double {
    return {};
}

//------------//
//User Defined//
//------------//
//!data
}